# SPDX-FileCopyrightText: 2020 iteratec GmbH
#
# SPDX-License-Identifier: Apache-2.0

name: "CI"
on: push
env:
  GO_VERSION: 1.15

jobs:

  # ---- Build Operator/Lurcher ----

  core:
    name: "Build Core | ${{ matrix.component }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component:
          - operator
          - lurcher
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Go Setup
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Lint
        working-directory: ${{ matrix.component }}
        run: |
          go fmt ./...
          go vet ./...

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: securecodebox/${{ matrix.component }}
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Image
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          platforms: linux/amd64
          push: false
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          outputs: type=docker,dest=${{ matrix.component }}_img

      - name: Archive Image
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.component }}
          path: ./${{ matrix.component }}_img
          retention-days: 1


  # ---- SDKs ----

  sdk:
    name: "SDKs"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sdk:
          - parser
          - hook
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: "Set `baseImageTag` To Commit Hash"
        run: echo "baseImageTag=sha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Docker Meta Parser Image
        id: docker_meta_parser
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: securecodebox/${{ matrix.sdk }}-sdk-nodejs
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

    # ---- Build SDK Container Image ----

      - name: Build ${{ matrix.sdk }} Image
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.sdk }}-sdk/nodejs/
          file: ./${{ matrix.sdk }}-sdk/nodejs/Dockerfile
          build-args: |
            namespace=securecodebox
            baseImageTag=${{ env.baseImageTag }}
          platforms: linux/amd64
          push: false
          tags: ${{ steps.docker_meta_parser.outputs.tags }}
          labels: ${{ steps.docker_meta_parser.outputs.labels }}
          outputs: type=docker,dest=${{ matrix.sdk }}-sdk_img

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.sdk }}-sdk
          path: ./${{ matrix.sdk }}-sdk_img
          retention-days: 1

  test-scanner:
    needs: [sdk, core]
    name: "test-scan on k8s ${{ matrix.k8sVersion }}"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          fetch-depth: 50

      - name: Detect Changes
        id: changed
        uses: marceloprado/has-changed-path@v1
        with:
          paths: scanners/test-scan

    # ---- Download Artifacts ----

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2

    # ---- Load SDK Image Into Docker

      - name: Load Images
        run: |
          docker load -i parser-sdk/parser-sdk_img
          docker images

    # ---- Build Container Image ----

      - name: "Set `baseImageTag` To Commit Hash"
        run: echo "baseImageTag=sha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Docker Meta Parser Image
        id: docker_meta_parser
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: securecodebox/parser-test-scan
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Docker Meta Scanner Image
        id: docker_meta_scanner
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: securecodebox/scanner-test-scan
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker

      - name: Build test-scan Parser Image
        if: steps.changed.outputs.changed == 'true'
        uses: docker/build-push-action@v2
        with:
          context: ./scanners/test-scan/parser
          file: ./scanners/test-scan/parser/Dockerfile
          build-args: |
            namespace=securecodebox
            baseImageTag=${{ env.baseImageTag }}
          platforms: linux/amd64
          push: false
          tags: ${{ steps.docker_meta_parser.outputs.tags }}
          labels: ${{ steps.docker_meta_parser.outputs.labels }}

      - name: Build test-scan Scanner Image
        if: steps.changed.outputs.changed == 'true'
        uses: docker/build-push-action@v2
        with:
          context: ./scanners/test-scan/scanner
          file: ./scanners/test-scan/scanner/Dockerfile
          build-args: |
            scannerVersion=${{ env.scannerVersion }}
          platforms: linux/amd64
          push: false
          tags: ${{ steps.docker_meta_scanner.outputs.tags }}
          labels: ${{ steps.docker_meta_scanner.outputs.labels }}

      - name: Export Images
        if: steps.changed.outputs.changed == 'true'
        # This is needed because buildx currently does not support exporting images
        # when using the docker driver
        run: |
          docker images
          docker image save  securecodebox/scanner-test-scan > scanner-test-scan.tar
          docker image save  securecodebox/parser-test-scan > parser-test-scan.tar

      - name: Archive Images
        uses: actions/upload-artifact@v2
        with:
          name: test-scan-images
          path: ./*-test-scan.tar
          retention-days: 1

  # ---- Scanners ----

  third-party-scanner:
    needs: [sdk, core]
    name: "${{ matrix.scanner }} on k8s ${{ matrix.k8sVersion }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scanner:
          - nmap
        k8sVersion:
          - 1.20.0
          - 1.19.4
          - 1.18.8
          - 1.17.11
    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          fetch-depth: 50

      - name: Detect Changes
        id: changed
        uses: marceloprado/has-changed-path@v1
        with:
          paths: scanners/${{ matrix.scanner }}

      - name: Install Scanner Dependencies
        if: steps.changed.outputs.changed == 'true'
        run: npm ci
        working-directory: ./scanners/${{ matrix.scanner }}/parser

    # ---- Unit Tests ----

      - name: Run Unit Tests
        if: steps.changed.outputs.changed == 'true'
        run: npm test -- --ci --colors --coverage
        working-directory: ./scanners/${{ matrix.scanner }}/parser

    # ---- Download Artifacts ----

      - name: Download all workflow run artifacts
        if: steps.changed.outputs.changed == 'true'
        uses: actions/download-artifact@v2

    # ---- Load SDK Image Into Docker

      - name: Load Images
        if: steps.changed.outputs.changed == 'true'
        run: |
          docker load -i parser-sdk/parser-sdk_img
          docker images

    # ---- Build Container Image ----

      - name: "Set `baseImageTag` To Commit Hash"
        if: steps.changed.outputs.changed == 'true'
        run: echo "baseImageTag=sha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Docker Meta Parser Image
        if: steps.changed.outputs.changed == 'true'
        id: docker_meta_parser
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: securecodebox/parser-${{ matrix.scanner }}
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set Image Tag To Scanner Version
        if: steps.changed.outputs.changed == 'true'
        uses: mikefarah/yq@v4.4.1
        with:
          cmd: echo scannerVersion=$(yq e .appVersion scanners/${{ matrix.scanner }}/Chart.yaml) >> $GITHUB_ENV

      - name: Docker Meta Scanner Image
        if: steps.changed.outputs.changed == 'true'
        id: docker_meta_scanner
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: securecodebox/scanner-${{ matrix.scanner }}
          tag-sha: true
          tag-custom-only: true
          tag-custom: ${{ env.scannerVersion }}

      - name: Set up Docker Buildx
        if: steps.changed.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker

      - name: Build ${{ matrix.scanner }} Parser Image
        if: steps.changed.outputs.changed == 'true'
        uses: docker/build-push-action@v2
        with:
          context: ./scanners/${{ matrix.scanner }}/parser
          file: ./scanners/${{ matrix.scanner }}/parser/Dockerfile
          build-args: |
            namespace=securecodebox
            baseImageTag=${{ env.baseImageTag }}
          platforms: linux/amd64
          push: false
          tags: ${{ steps.docker_meta_parser.outputs.tags }}
          labels: ${{ steps.docker_meta_parser.outputs.labels }}

      - name: Build ${{ matrix.scanner }} Scanner Image
        if: steps.changed.outputs.changed == 'true'
        uses: docker/build-push-action@v2
        with:
          context: ./scanners/${{ matrix.scanner }}/scanner
          file: ./scanners/${{ matrix.scanner }}/scanner/Dockerfile
          build-args: |
            scannerVersion=${{ env.scannerVersion }}
          platforms: linux/amd64
          push: false
          tags: ${{ steps.docker_meta_scanner.outputs.tags }}
          labels: ${{ steps.docker_meta_scanner.outputs.labels }}

      - name: Export Images
        if: steps.changed.outputs.changed == 'true'
        # This is needed because buildx currently does not support exporting images
        # when using the docker driver
        run: |
          docker images
          docker image save  securecodebox/scanner-${{ matrix.scanner }} > scanner-${{ matrix.scanner }}.tar
          docker image save  securecodebox/parser-${{ matrix.scanner }} > parser-${{ matrix.scanner }}.tar

     # ---- Setup Kind Cluster ----

      - name: Setup Kind Cluster
        if: steps.changed.outputs.changed == 'true'
        run: kind create cluster --image kindest/node:v${{ matrix.k8sVersion }} --wait 3m
      - name: Inspect Cluster
        if: steps.changed.outputs.changed == 'true'
        run: |
          kubectl config current-context
          kubectl get node

      - name: Load Images Into Cluster
        if: steps.changed.outputs.changed == 'true'
        run: |

          kind load image-archive ./scanner-${{ matrix.scanner }}.tar
          kind load image-archive ./parser-${{ matrix.scanner }}.tar
          kind load image-archive ./operator/operator_img
          kind load image-archive ./lurcher/lurcher_img

      - name: Debug Images Loaded Into Kind
        if: steps.changed.outputs.changed == 'true'
        run: docker exec kind-control-plane crictl images

      - name: Install Operator
        if: steps.changed.outputs.changed == 'true'
        run: |

          kubectl create ns securecodebox-system
          kubectl create ns integration-tests
          rm operator/operator_img
          rm lurcher/lurcher_img
          helm -n securecodebox-system install securecodebox-operator ./operator \
            --set="image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="image.pullPolicy=Never" \
            --set="lurcher.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="lurcher.image.pullPolicy=Never"
      - name: Inspect Operator
        if: steps.changed.outputs.changed == 'true'
        run: |
           echo "Deployment in namespace 'securecodebox-system'"
           kubectl -n securecodebox-system get deployments
           echo "Pods in namespace 'securecodebox-system'"
           kubectl -n securecodebox-system get pods
           echo "Operator Startup Logs"
           kubectl -n securecodebox-system logs deployment/securecodebox-controller-manager
      - name: Install ${{ matrix.scanner }}
        if: steps.changed.outputs.changed == 'true'
        run: |
          helm -n integration-tests install ${{ matrix.scanner }} ./scanners/${{ matrix.scanner }} \
            --set="image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parserImage.tag=sha-$(git rev-parse --short HEAD)" \
            --set="image.pullPolicy=Never" \
            --set="parserImage.imagePullPolicy=Never"
      - name: Install Test Dependencies
        if: steps.changed.outputs.changed == 'true'
        run: npm ci
        working-directory: ./tests/integration
      - name: Run Tests
        if: steps.changed.outputs.changed == 'true'
        run: npx jest --ci --color scanner/${{ matrix.scanner }}
        working-directory: ./tests/integration

      # ---- Debuging Cluster on Failure ----

      - name: Inspect Namespaces Post Failure
        if: failure()
        run: |
          echo "List all 'HelmCharts' in all namespaces"
          helm list --all-namespaces
          echo "List all 'Scans' in all namespaces"
          kubectl -n integration-tests get scan -o wide --all-namespaces
          echo "List all 'Jobs' in all namespaces"
          kubectl -n integration-tests get jobs -o wide --all-namespaces
          echo "List all 'Pods' in all namespaces"
          kubectl -n integration-tests get pods -o wide --all-namespaces

      - name: Inspect Scan/Parse Definition
        if: failure()
        run: |
          echo "Describe ${{ matrix.scanner }}"
          kubectl -n integration-tests describe scantype ${{ matrix.scanner }}
          echo "Describe Parser For ${{ matrix.scanner }}"
          kubectl -n integration-tests describe parsedefinition ${{ matrix.scanner }}

      - name: "Inspect Operator"
        if: failure()
        run: |
          echo "Deployment in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get deployments
          kubectl -n securecodebox-system describe deployments
          echo "Deployment in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get pods
          echo "Operator Startup Logs"
          kubectl -n securecodebox-system logs deployment/securecodebox-controller-manager

      - name: Inspect Kind Images
        if: failure()
        run: docker exec kind-control-plane crictl images

  # ---- Hooks ----

  hooks:
    name: "${{ matrix.hook }} on k8s ${{ matrix.k8sVersion }} "
    needs:
      - core
      - sdk
      - test-scanner
    runs-on: ubuntu-latest
    strategy:
      matrix:
        hook:
          - update-field
        k8sVersion:
          - 1.20.0
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Scanner Dependencies
        run: npm ci
        working-directory: ./hooks/${{ matrix.hook }}

    # ---- Unit Tests ----

      - name: Run Unit Tests
        run: npm test -- --ci --colors --coverage
        working-directory: ./hooks/${{ matrix.hook }}

    # ---- Download Artifacts ----

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2

    # ---- Load SDK Image Into Docker

      - name: Load Images
        run: |
          docker load -i hook-sdk/hook-sdk_img
          docker images

    # ---- Build Container Image ----

      - name: "Set `baseImageTag` To Commit Hash"
        run: echo "baseImageTag=sha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Docker Meta Hook Image
        id: docker_meta_hook
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: securecodebox/${{ matrix.hook }}
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker

      - name: Build ${{ matrix.scanner }} Hook Image
        uses: docker/build-push-action@v2
        with:
          context: ./hooks/${{ matrix.hook }}
          file: ./hooks/${{ matrix.hook }}/Dockerfile
          build-args: |
            namespace=securecodebox
            baseImageTag=${{ env.baseImageTag }}
          platforms: linux/amd64
          push: false
          tags: ${{ steps.docker_meta_hook.outputs.tags }}
          labels: ${{ steps.docker_meta_hook.outputs.labels }}

      - name: Export Images
        # This is needed because buildx currently does not support exporting images
        # when using the docker driver
        run: |
          docker images
          docker image save  securecodebox/${{ matrix.hook }} > ${{ matrix.scanner }}.tar

    # ---- Download Artifacts ----

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2

    # ---- Setup Kind Cluster ----

      - name: Setup Kind Cluster
        if: steps.changed.outputs.changed == 'true'
        run: kind create cluster --image kindest/node:v${{ matrix.k8sVersion }} --wait 3m
      - name: Inspect Cluster
        if: steps.changed.outputs.changed == 'true'
        run: |
          kubectl config current-context
          kubectl get node

      - name: Load Images Into Cluster
        if: steps.changed.outputs.changed == 'true'
        run: |
          name: test-scan-images
          kind load image-archive ./test-scan-images/scanner-test-scan.tar
          kind load image-archive ./test-scan-images/parser-test-scan.tar
          kind load image-archive ./${{ matrix.hook }}.tar
          kind load image-archive ./operator/operator_img
          kind load image-archive ./lurcher/lurcher_img

      - name: Debug Images Loaded Into Kind
        if: steps.changed.outputs.changed == 'true'
        run: docker exec kind-control-plane crictl images

      - name: Install Operator
        if: steps.changed.outputs.changed == 'true'
        run: |
          kubectl create ns securecodebox-system
          kubectl create ns integration-tests
          rm operator/operator_img
          rm lurcher/lurcher_img
          helm -n securecodebox-system install securecodebox-operator ./operator \
            --set="image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="image.pullPolicy=Never" \
            --set="lurcher.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="lurcher.image.pullPolicy=Never"
      - name: Inspect Operator
        if: steps.changed.outputs.changed == 'true'
        run: |
           echo "Deployment in namespace 'securecodebox-system'"
           kubectl -n securecodebox-system get deployments
           echo "Pods in namespace 'securecodebox-system'"
           kubectl -n securecodebox-system get pods
           echo "Operator Startup Logs"
           kubectl -n securecodebox-system logs deployment/securecodebox-controller-manager
      - name: Install ${{ matrix.hook }}
        if: steps.changed.outputs.changed == 'true'
        run: |
          helm -n integration-tests install ${{ matrix.hook }} ./hooks/${{ matrix.hook }} \
            --set="image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="image.pullPolicy=Never"
      - name: Install Test Dependencies
        if: steps.changed.outputs.changed == 'true'
        run: npm ci
        working-directory: ./tests/integration
      - name: Run Tests
        if: steps.changed.outputs.changed == 'true'
        run: npx jest --ci --color hooks/${{ matrix.hook }}
        working-directory: ./tests/integration

      # ---- Debuging Cluster on Failure ----

      - name: Inspect Namespaces Post Failure
        if: failure()
        run: |
          echo "List all 'HelmCharts' in all namespaces"
          helm list --all-namespaces
          echo "List all 'Scans' in all namespaces"
          kubectl -n integration-tests get scan -o wide --all-namespaces
          echo "List all 'Jobs' in all namespaces"
          kubectl -n integration-tests get jobs -o wide --all-namespaces
          echo "List all 'Pods' in all namespaces"
          kubectl -n integration-tests get pods -o wide --all-namespaces

      - name: Inspect Hook Definition
        if: failure()
        run: |
          echo "Describe ${{ matrix.hook }}"
          kubectl -n integration-tests describe scancompletionhook ${{ matrix.hook }}

      - name: "Inspect Operator"
        if: failure()
        run: |
          echo "Deployment in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get deployments
          kubectl -n securecodebox-system describe deployments
          echo "Deployment in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get pods
          echo "Operator Startup Logs"
          kubectl -n securecodebox-system logs deployment/securecodebox-controller-manager

      - name: Inspect Kind Images
        if: failure()
        run: docker exec kind-control-plane crictl images
